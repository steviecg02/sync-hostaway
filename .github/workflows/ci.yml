name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r dev-requirements.txt

      - name: Run ruff linter
        run: ruff check .

      - name: Run black formatter check
        run: black --check .

      - name: Run mypy type checker
        run: mypy sync_hostaway/

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
          ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8000
          LOG_LEVEL: INFO
          DRY_RUN: false
          WEBHOOK_USERNAME: test-user
          WEBHOOK_PASSWORD: test-pass
          WEBHOOK_BASE_URL: https://test.example.com
        run: alembic upgrade head

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
          ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8000
          LOG_LEVEL: INFO
          DRY_RUN: false
          WEBHOOK_USERNAME: test-user
          WEBHOOK_PASSWORD: test-pass
          WEBHOOK_BASE_URL: https://test.example.com
        run: |
          PYTHONPATH=. pytest --cov=sync_hostaway --cov-report=term -v

  docker-test:
    name: Docker Container Test
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t sync-hostaway .

      - name: Start application container
        run: |
          docker run -d \
            --name sync-hostaway-app \
            --network host \
            -e DATABASE_URL=postgresql://postgres:postgres@localhost:5432/postgres \
            -e ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000 \
            -e LOG_LEVEL=INFO \
            -e DRY_RUN=false \
            -e WEBHOOK_USERNAME=test-user \
            -e WEBHOOK_PASSWORD=test-pass \
            -e WEBHOOK_BASE_URL=https://test.example.com \
            sync-hostaway

      - name: Wait for application health
        run: |
          timeout=60
          while [ $timeout -gt 0 ]; do
            if curl -sf http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ Health check passed"
              break
            fi
            sleep 2
            timeout=$((timeout - 2))
            if [ $timeout -le 0 ]; then
              echo "❌ Health check failed - timeout"
              docker logs sync-hostaway-app
              exit 1
            fi
          done

      - name: Check readiness endpoint
        run: |
          if curl -sf http://localhost:8000/ready | grep -q '"status":"ready"'; then
            echo "✅ Readiness check passed"
          else
            echo "❌ Readiness check failed"
            docker logs sync-hostaway-app
            exit 1
          fi

      - name: Scan logs for errors
        run: |
          if docker logs sync-hostaway-app | grep -iE "(error|exception|traceback)" | grep -v "uvicorn.error"; then
            echo "❌ Found errors in logs"
            exit 1
          else
            echo "✅ No errors found in logs"
          fi

      - name: Cleanup containers
        if: always()
        run: docker rm -f sync-hostaway-app || true

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, docker-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.meta.outputs.digest }}"
